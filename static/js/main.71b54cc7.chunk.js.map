{"version":3,"sources":["components/PlayerCountButtons.js","faction-images/eyrie.png","faction-images/corvid.png","faction-images/alliance.png","faction-images/cult.png","faction-images/duchy.png","faction-images/riverfolk.png","faction-images/marquise.png","faction-images/vagabond.png","faction-images/vagabond2.png","faction-images/hundreds.png","faction-images/keepers.png","constants.js","components/FactionStatusOverlay.js","components/ChooseFactionButton.js","components/ChooseFactionButtons.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerCountButtons","requiredReach","handlePlayerCountButtonPress","Stack","justifyContent","ToggleButtonGroup","exclusive","value","onChange","ToggleButton","IS_PICKED","IS_BANNED","IS_AVAILABLE","IS_NOT_AVAILABLE","FactionStatusOverlay","sx","position","zIndex","width","height","status","color","ChooseFactionButton","faction","handleFactionClick","widthAndHeight","badgeTopAndRight","badgeFontSize","opacity","fabColor","getFactionButtonColor","Fab","onClick","name","reach","disabled","Badge","badgeContent","Avatar","fontSize","backgroundColor","top","right","alignItems","imgProps","objectFit","src","image","ChooseFactionButtons","playerCount","setReach","React","marquise","marquiseImage","eyrie","eyrieImage","alliance","allianceImage","vagabond1","vagabondImage","riverfolk","riverfolkImage","cult","cultImage","corvid","corvidImage","duchy","duchyImage","vagabond2","vagabond2Image","hundreds","hundredsImage","keepers","keepersImage","factions","setFactions","recalculatedFactions","setAvailableFactions","previousFactions","pickedFactions","Object","values","filter","length","key","sortedFactionArray","sort","faction1","faction2","playersStillToPick","map","reduce","total","currentFactionReach","factionsKey","sortedFactionArrayWithoutFaction","maxReachForFaction","i","factionName","newFactions","Grid","container","columns","xs","rowSpacing","index","item","display","ReachIndicator","App","setRequiredReach","setPlayerCount","Container","maxWidth","className","minWidth","CssBaseline","event","newRequiredReach","target","innerText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71b54cc7.chunk.js","sourcesContent":["import * as React from 'react';\nimport {Stack, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\n\nexport const PlayerCountButtons = ({requiredReach, handlePlayerCountButtonPress}) => {\n    return (\n        <Stack justifyContent=\"center\">\n            <h4>Players</h4>\n            <ToggleButtonGroup exclusive value={requiredReach} onChange={handlePlayerCountButtonPress}>\n                <ToggleButton value={17}>2</ToggleButton>\n                <ToggleButton value={18}>3</ToggleButton>\n                <ToggleButton value={21}>4</ToggleButton>\n                <ToggleButton value={25}>5</ToggleButton>\n                <ToggleButton value={28}>6</ToggleButton>\n            </ToggleButtonGroup>\n        </Stack>\n    )\n}","export default __webpack_public_path__ + \"static/media/eyrie.4739ea8f.png\";","export default __webpack_public_path__ + \"static/media/corvid.d2562a48.png\";","export default __webpack_public_path__ + \"static/media/alliance.e806127f.png\";","export default __webpack_public_path__ + \"static/media/cult.4c81f45b.png\";","export default __webpack_public_path__ + \"static/media/duchy.fd1c72c5.png\";","export default __webpack_public_path__ + \"static/media/riverfolk.d7d55d70.png\";","export default __webpack_public_path__ + \"static/media/marquise.0fdde8b2.png\";","export default __webpack_public_path__ + \"static/media/vagabond.c1faa343.png\";","export default __webpack_public_path__ + \"static/media/vagabond2.89ede692.png\";","export default __webpack_public_path__ + \"static/media/hundreds.46ea4252.png\";","export default __webpack_public_path__ + \"static/media/keepers.61ee9ba3.png\";","export const IS_PICKED = 'IS_PICKED';\nexport const IS_BANNED = 'IS_BANNED';\nexport const IS_AVAILABLE = 'IS_AVAILABLE';\nexport const IS_NOT_AVAILABLE = 'IS_NOT_AVAILABLE';\n\n","import {IS_BANNED, IS_PICKED} from \"../constants\";\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\nimport NotInterestedOutlinedIcon from \"@mui/icons-material/NotInterestedOutlined\";\nimport * as React from \"react\";\n\nexport const FactionStatusOverlay = ({status}) => {\n    let sx = {\n        position: \"absolute\",\n        zIndex: \"1\",\n        width: \"85%\",\n        height: \"85%\"\n    }\n\n    switch (status) {\n        case IS_PICKED:\n            return (\n                <CheckCircleOutlineIcon\n                    color=\"success\"\n                    sx={sx}\n                />\n            )\n        case IS_BANNED:\n            return (\n                <NotInterestedOutlinedIcon\n                    color=\"error\"\n                    sx={sx}\n                />\n            )\n        default:\n            return (<></>)\n    }\n}","import {Avatar, Badge, Fab} from \"@mui/material\";\nimport * as React from \"react\";\nimport {IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\nimport {FactionStatusOverlay} from \"./FactionStatusOverlay\";\n\n\nconst getFactionButtonColor = (faction) => {\n    if (faction.status === IS_PICKED) {\n        return \"#4da251\"\n    }\n    if (faction.status === IS_BANNED) {\n        return \"#b66969\"\n    }\n}\n\nexport const ChooseFactionButton = ({faction, handleFactionClick}) => {\n    const widthAndHeight = faction.status === IS_NOT_AVAILABLE ? \"4em\" : \"7em\"\n    const badgeTopAndRight = faction.status === IS_NOT_AVAILABLE ? \"0.5em\" : \"1em\"\n    const badgeFontSize = faction.status === IS_NOT_AVAILABLE ? \"small\" : \"large\";\n    const opacity = faction.status === IS_NOT_AVAILABLE ? \"50%\" : \"100%\"\n    const fabColor = getFactionButtonColor(faction);\n\n    return (\n        <Fab onClick={() => handleFactionClick(faction.name)}\n             value={faction.reach}\n             sx={{width: widthAndHeight, height: widthAndHeight, opacity: opacity}}\n             disabled={faction.status === IS_NOT_AVAILABLE}\n             data-cy={faction.name}\n        >\n            <Badge\n                badgeContent={\n                    <Avatar\n                        sx={{width: \"2em\", height: \"2em\", fontSize: badgeFontSize, backgroundColor: fabColor}}\n                    >\n                        {faction.reach}\n                    </Avatar>\n                }\n                sx={\n                    {\n                        \"& .MuiBadge-badge\": {\n                            top: badgeTopAndRight,\n                            right: badgeTopAndRight,\n                        },\n                        width: \"100%\",\n                        height: \"100%\",\n                        alignItems: \"center\",\n                        justifyContent: \"center\"\n                    }\n                }\n            >\n                <FactionStatusOverlay status={faction.status}/>\n                <Avatar\n                    sx={{width: \"90%\", height: \"90%\"}}\n                    imgProps={{sx: {objectFit: \"contain\"}}}\n                    src={faction.image}\n                />\n            </Badge>\n        </Fab>\n    )\n}","import {Grid} from \"@mui/material\";\nimport eyrieImage from \"../faction-images/eyrie.png\";\nimport corvidImage from \"../faction-images/corvid.png\";\nimport allianceImage from \"../faction-images/alliance.png\";\nimport cultImage from \"../faction-images/cult.png\";\nimport duchyImage from \"../faction-images/duchy.png\";\nimport riverfolkImage from \"../faction-images/riverfolk.png\";\nimport marquiseImage from \"../faction-images/marquise.png\";\nimport vagabondImage from \"../faction-images/vagabond.png\";\nimport vagabond2Image from \"../faction-images/vagabond2.png\";\nimport hundredsImage from \"../faction-images/hundreds.png\";\nimport keepersImage from \"../faction-images/keepers.png\";\nimport * as React from 'react';\nimport {IS_AVAILABLE, IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\nimport {ChooseFactionButton} from \"./ChooseFactionButton\";\n\nexport const ChooseFactionButtons = ({playerCount, setReach, requiredReach}) => {\n    const [factions, setFactions] = React.useState({\n        marquise: {\n            name: \"marquise\",\n            image: marquiseImage,\n            reach: 10,\n            status: IS_AVAILABLE\n        },\n        eyrie: {\n            name: \"eyrie\",\n            image: eyrieImage,\n            reach: 7,\n            status: IS_AVAILABLE\n        },\n        alliance: {\n            name: \"alliance\",\n            image: allianceImage,\n            reach: 3,\n            status: IS_AVAILABLE\n        },\n        vagabond1: {\n            name: \"vagabond1\",\n            image: vagabondImage,\n            reach: 5,\n            status: IS_NOT_AVAILABLE\n        },\n        riverfolk: {\n            name: \"riverfolk\",\n            image: riverfolkImage,\n            reach: 5,\n            status: IS_NOT_AVAILABLE\n        },\n        cult: {\n            name: \"cult\",\n            image: cultImage,\n            reach: 2,\n            status: IS_NOT_AVAILABLE\n        },\n        corvid: {\n            name: \"corvid\",\n            image: corvidImage,\n            reach: 3,\n            status: IS_AVAILABLE\n        },\n        duchy: {\n            name: \"duchy\",\n            image: duchyImage,\n            reach: 8,\n            status: IS_AVAILABLE\n        },\n        vagabond2: {\n            name: \"vagabond2\",\n            image: vagabond2Image,\n            reach: 2,\n            status: IS_NOT_AVAILABLE\n        },\n        hundreds: {\n            name: \"hundreds\",\n            image: hundredsImage,\n            reach: 9,\n            status: IS_AVAILABLE\n        },\n        keepers: {\n            name: \"keepers\",\n            image: keepersImage,\n            reach: 8,\n            status: IS_AVAILABLE\n        }\n    });\n\n    React.useEffect(() => {\n        const recalculatedFactions = setAvailableFactions(factions);\n\n        setFactions(recalculatedFactions);\n    }, [requiredReach])\n\n    const setAvailableFactions = (previousFactions) => {\n        const factions = {...previousFactions};\n        const pickedFactions = Object.values(factions).filter((faction) => faction.status === IS_PICKED)\n\n        // If the number of picked factions >= number of players in game then set every not picked and not banned faction as disabled\n        if (pickedFactions.length >= playerCount) {\n\n            for (const key in factions) {\n                if (!(factions[key].status === IS_PICKED || factions[key].status === IS_BANNED)) {\n                    factions[key].status = IS_NOT_AVAILABLE\n                }\n            }\n\n            return factions;\n        }\n\n        // Filter out picked and banned factions\n        let sortedFactionArray = Object.values(factions)\n            .filter((faction) => !(faction.status === IS_PICKED || faction.status === IS_BANNED))\n            .sort((faction1, faction2) => {\n                if (faction1.reach > faction2.reach) {\n                    return -1;\n                }\n                if (faction1.reach < faction2.reach) {\n                    return 1;\n                }\n                return 0;\n            });\n\n        const playersStillToPick = playerCount - pickedFactions.length;\n\n        const reach = Object.values(factions)\n            .filter((faction) => faction.status === IS_PICKED)\n            .map((faction) => faction.reach)\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\n\n        for (const factionsKey in factions) {\n            if (factions[factionsKey].status === IS_PICKED || factions[factionsKey].status === IS_BANNED) {\n                continue;\n            }\n\n            if (factions[factionsKey].name === \"vagabond2\" && (factions.vagabond1.status !== IS_PICKED)){\n                factions[factionsKey].status = IS_NOT_AVAILABLE;\n                continue\n            }\n\n            let sortedFactionArrayWithoutFaction = sortedFactionArray.filter((faction) => faction.name !== factionsKey)\n            let maxReachForFaction = factions[factionsKey].reach;\n            for (let i = 0; i < playersStillToPick - 1; i++) {\n                if (sortedFactionArrayWithoutFaction[i]) {\n                    maxReachForFaction += sortedFactionArrayWithoutFaction[i].reach\n                }\n            }\n\n            if (reach + maxReachForFaction < requiredReach) {\n                factions[factionsKey].status = IS_NOT_AVAILABLE\n            } else {\n                factions[factionsKey].status = IS_AVAILABLE\n            }\n        }\n\n        return factions;\n    }\n\n    const handleFactionClick = (factionName) => {\n        let newFactions = {...factions};\n\n        switch (factions[factionName].status) {\n            case IS_AVAILABLE:\n                newFactions[factionName].status = IS_PICKED\n                break;\n            case IS_PICKED:\n                newFactions[factionName].status = IS_BANNED\n                break;\n            case IS_BANNED:\n                newFactions[factionName].status = IS_AVAILABLE\n                break;\n            default:\n                break;\n        }\n\n        newFactions = setAvailableFactions(newFactions);\n\n        setFactions(newFactions);\n    }\n\n    React.useEffect(() => {\n        const reach = Object.values(factions)\n            .filter((faction) => faction.status === IS_PICKED)\n            .map((faction) => faction.reach)\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\n\n        setReach(reach);\n    }, [setReach, factions])\n\n    return (\n        <Grid container columns={{xs: 3}} rowSpacing={6} justifyContent={'center'}>\n            {Object.values(factions).map((faction, index) => (\n                <Grid\n                    item\n                    xs={1}\n                    sx={\n                        {\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            alignItems: \"center\",\n                            height: \"9em\"\n                        }\n                    }\n                    key={index}\n                >\n                    <ChooseFactionButton\n                        handleFactionClick={handleFactionClick}\n                        faction={faction}\n                    />\n                </Grid>\n            ))}\n        </Grid>\n    );\n};","import './App.css';\nimport * as React from \"react\";\n\nimport {Container, CssBaseline, Stack} from \"@mui/material\";\nimport {PlayerCountButtons} from \"./components/PlayerCountButtons\";\nimport {ChooseFactionButtons} from \"./components/ChooseFactionButtons\";\n\n\nconst ReachIndicator = ({reach, requiredReach}) => {\n    return(\n        <h3 data-cy={`reach-indicator`}>{reach}/{requiredReach}+</h3>\n    )\n}\n\nfunction App() {\n    const [reach, setReach] = React.useState(0);\n    const [requiredReach, setRequiredReach] = React.useState(21);\n    const [playerCount, setPlayerCount] = React.useState(4);\n\n    const handlePlayerCountButtonPress = (event, newRequiredReach) => {\n        if (newRequiredReach != null) {\n            setRequiredReach(newRequiredReach)\n            setPlayerCount(event.target.innerText)\n        }\n    }\n\n    return (\n        <Container maxWidth=\"sm\" className=\"App\"\n                   sx={{minWidth: \"320px\", height: \"100%\"}}\n        >\n            <CssBaseline/>\n            <Stack\n                container\n                sx={{height: \"100%\"}}\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n            >\n                <ReachIndicator reach={reach} requiredReach={requiredReach}/>\n                <ChooseFactionButtons\n                    playerCount={playerCount}\n                    setReach={setReach}\n                    reach={reach}\n                    requiredReach={requiredReach}\n                />\n                <PlayerCountButtons\n                    requiredReach={requiredReach}\n                    handlePlayerCountButtonPress={handlePlayerCountButtonPress}\n                />\n            </Stack>\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}