{"version":3,"sources":["components/PlayerCountButtons.js","faction-images/eyrie.png","faction-images/corvid.png","faction-images/alliance.png","faction-images/cult.png","faction-images/duchy.png","faction-images/riverfolk.png","faction-images/marquise.png","faction-images/vagabond.png","faction-images/vagabond2.png","faction-images/hundreds.png","faction-images/keepers.png","constants.js","components/FactionStatusOverlay.js","components/ChooseFactionButton.js","components/ChooseFactionButtons.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerCountButtons","requiredReach","handlePlayerCountButtonPress","Stack","justifyContent","ToggleButtonGroup","exclusive","value","onChange","ToggleButton","IS_PICKED","IS_BANNED","IS_AVAILABLE","IS_NOT_AVAILABLE","FactionStatusOverlay","sx","position","zIndex","width","height","status","color","ChooseFactionButton","faction","handleFactionClick","widthAndHeight","badgeTopAndRight","badgeFontSize","opacity","fabColor","getFactionButtonColor","Fab","onClick","name","reach","disabled","Badge","badgeContent","Avatar","fontSize","backgroundColor","top","right","alignItems","imgProps","objectFit","src","image","ChooseFactionButtons","playerCount","setReach","React","marquise","marquiseImage","eyrie","eyrieImage","alliance","allianceImage","vagabond1","vagabondImage","riverfolk","riverfolkImage","cult","cultImage","corvid","corvidImage","duchy","duchyImage","vagabond2","vagabond2Image","hundreds","hundredsImage","keepers","keepersImage","factions","setFactions","recalculatedFactions","setAvailableFactions","previousFactions","pickedFactions","Object","values","filter","length","key","sortedFactionArray","sort","faction1","faction2","playersStillToPick","map","reduce","total","currentFactionReach","factionsKey","sortedFactionArrayWithoutFaction","maxReachForFaction","i","factionName","newFactions","Grid","container","columns","xs","rowSpacing","index","item","display","ReachIndicator","App","setRequiredReach","setPlayerCount","Container","maxWidth","className","minWidth","CssBaseline","event","newRequiredReach","target","innerText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e91a0902.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {Stack, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\n\r\nexport const PlayerCountButtons = ({requiredReach, handlePlayerCountButtonPress}) => {\r\n    return (\r\n        <Stack justifyContent=\"center\">\r\n            <h4>Players</h4>\r\n            <ToggleButtonGroup exclusive value={requiredReach} onChange={handlePlayerCountButtonPress}>\r\n                <ToggleButton value={17}>2</ToggleButton>\r\n                <ToggleButton value={18}>3</ToggleButton>\r\n                <ToggleButton value={21}>4</ToggleButton>\r\n                <ToggleButton value={25}>5</ToggleButton>\r\n                <ToggleButton value={28}>6</ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </Stack>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/eyrie.4739ea8f.png\";","export default __webpack_public_path__ + \"static/media/corvid.d2562a48.png\";","export default __webpack_public_path__ + \"static/media/alliance.e806127f.png\";","export default __webpack_public_path__ + \"static/media/cult.4c81f45b.png\";","export default __webpack_public_path__ + \"static/media/duchy.fd1c72c5.png\";","export default __webpack_public_path__ + \"static/media/riverfolk.d7d55d70.png\";","export default __webpack_public_path__ + \"static/media/marquise.0fdde8b2.png\";","export default __webpack_public_path__ + \"static/media/vagabond.c1faa343.png\";","export default __webpack_public_path__ + \"static/media/vagabond2.89ede692.png\";","export default __webpack_public_path__ + \"static/media/hundreds.46ea4252.png\";","export default __webpack_public_path__ + \"static/media/keepers.61ee9ba3.png\";","export const IS_PICKED = 'IS_PICKED';\r\nexport const IS_BANNED = 'IS_BANNED';\r\nexport const IS_AVAILABLE = 'IS_AVAILABLE';\r\nexport const IS_NOT_AVAILABLE = 'IS_NOT_AVAILABLE';\r\n\r\n","import {IS_BANNED, IS_PICKED} from \"../constants\";\r\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\r\nimport NotInterestedOutlinedIcon from \"@mui/icons-material/NotInterestedOutlined\";\r\nimport * as React from \"react\";\r\n\r\nexport const FactionStatusOverlay = ({status}) => {\r\n    let sx = {\r\n        position: \"absolute\",\r\n        zIndex: \"1\",\r\n        width: \"85%\",\r\n        height: \"85%\"\r\n    }\r\n\r\n    switch (status) {\r\n        case IS_PICKED:\r\n            return (\r\n                <CheckCircleOutlineIcon\r\n                    color=\"success\"\r\n                    sx={sx}\r\n                />\r\n            )\r\n        case IS_BANNED:\r\n            return (\r\n                <NotInterestedOutlinedIcon\r\n                    color=\"error\"\r\n                    sx={sx}\r\n                />\r\n            )\r\n        default:\r\n            return (<></>)\r\n    }\r\n}","import {Avatar, Badge, Fab} from \"@mui/material\";\r\nimport * as React from \"react\";\r\nimport {IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\r\nimport {FactionStatusOverlay} from \"./FactionStatusOverlay\";\r\n\r\n\r\nconst getFactionButtonColor = (faction) => {\r\n    if (faction.status === IS_PICKED) {\r\n        return \"#4da251\"\r\n    }\r\n    if (faction.status === IS_BANNED) {\r\n        return \"#b66969\"\r\n    }\r\n}\r\n\r\nexport const ChooseFactionButton = ({faction, handleFactionClick}) => {\r\n    const widthAndHeight = faction.status === IS_NOT_AVAILABLE ? \"4em\" : \"7em\"\r\n    const badgeTopAndRight = faction.status === IS_NOT_AVAILABLE ? \"0.5em\" : \"1em\"\r\n    const badgeFontSize = faction.status === IS_NOT_AVAILABLE ? \"small\" : \"large\";\r\n    const opacity = faction.status === IS_NOT_AVAILABLE ? \"50%\" : \"100%\"\r\n    const fabColor = getFactionButtonColor(faction);\r\n\r\n    return (\r\n        <Fab onClick={() => handleFactionClick(faction.name)}\r\n             value={faction.reach}\r\n             sx={{width: widthAndHeight, height: widthAndHeight, opacity: opacity}}\r\n             disabled={faction.status === IS_NOT_AVAILABLE}\r\n             data-cy={faction.name}\r\n        >\r\n            <Badge\r\n                badgeContent={\r\n                    <Avatar\r\n                        sx={{width: \"2em\", height: \"2em\", fontSize: badgeFontSize, backgroundColor: fabColor}}\r\n                    >\r\n                        {faction.reach}\r\n                    </Avatar>\r\n                }\r\n                sx={\r\n                    {\r\n                        \"& .MuiBadge-badge\": {\r\n                            top: badgeTopAndRight,\r\n                            right: badgeTopAndRight,\r\n                        },\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\"\r\n                    }\r\n                }\r\n            >\r\n                <FactionStatusOverlay status={faction.status}/>\r\n                <Avatar\r\n                    sx={{width: \"90%\", height: \"90%\"}}\r\n                    imgProps={{sx: {objectFit: \"contain\"}}}\r\n                    src={faction.image}\r\n                />\r\n            </Badge>\r\n        </Fab>\r\n    )\r\n}","import {Grid} from \"@mui/material\";\r\nimport eyrieImage from \"../faction-images/eyrie.png\";\r\nimport corvidImage from \"../faction-images/corvid.png\";\r\nimport allianceImage from \"../faction-images/alliance.png\";\r\nimport cultImage from \"../faction-images/cult.png\";\r\nimport duchyImage from \"../faction-images/duchy.png\";\r\nimport riverfolkImage from \"../faction-images/riverfolk.png\";\r\nimport marquiseImage from \"../faction-images/marquise.png\";\r\nimport vagabondImage from \"../faction-images/vagabond.png\";\r\nimport vagabond2Image from \"../faction-images/vagabond2.png\";\r\nimport hundredsImage from \"../faction-images/hundreds.png\";\r\nimport keepersImage from \"../faction-images/keepers.png\";\r\nimport * as React from 'react';\r\nimport {IS_AVAILABLE, IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\r\nimport {ChooseFactionButton} from \"./ChooseFactionButton\";\r\n\r\nexport const ChooseFactionButtons = ({playerCount, setReach, requiredReach}) => {\r\n    const [factions, setFactions] = React.useState({\r\n        marquise: {\r\n            name: \"marquise\",\r\n            image: marquiseImage,\r\n            reach: 10,\r\n            status: IS_AVAILABLE\r\n        },\r\n        eyrie: {\r\n            name: \"eyrie\",\r\n            image: eyrieImage,\r\n            reach: 7,\r\n            status: IS_AVAILABLE\r\n        },\r\n        alliance: {\r\n            name: \"alliance\",\r\n            image: allianceImage,\r\n            reach: 3,\r\n            status: IS_AVAILABLE\r\n        },\r\n        vagabond1: {\r\n            name: \"vagabond1\",\r\n            image: vagabondImage,\r\n            reach: 5,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        riverfolk: {\r\n            name: \"riverfolk\",\r\n            image: riverfolkImage,\r\n            reach: 5,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        cult: {\r\n            name: \"cult\",\r\n            image: cultImage,\r\n            reach: 2,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        corvid: {\r\n            name: \"corvid\",\r\n            image: corvidImage,\r\n            reach: 3,\r\n            status: IS_AVAILABLE\r\n        },\r\n        duchy: {\r\n            name: \"duchy\",\r\n            image: duchyImage,\r\n            reach: 8,\r\n            status: IS_AVAILABLE\r\n        },\r\n        vagabond2: {\r\n            name: \"vagabond2\",\r\n            image: vagabond2Image,\r\n            reach: 2,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        hundreds: {\r\n            name: \"hundreds\",\r\n            image: hundredsImage,\r\n            reach: 9,\r\n            status: IS_AVAILABLE\r\n        },\r\n        keepers: {\r\n            name: \"keepers\",\r\n            image: keepersImage,\r\n            reach: 8,\r\n            status: IS_AVAILABLE\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        const recalculatedFactions = setAvailableFactions(factions);\r\n\r\n        setFactions(recalculatedFactions);\r\n    }, [requiredReach])\r\n\r\n    const setAvailableFactions = (previousFactions) => {\r\n        const factions = {...previousFactions};\r\n        const pickedFactions = Object.values(factions).filter((faction) => faction.status === IS_PICKED)\r\n\r\n        // If the number of picked factions >= number of players in game then set every not picked and not banned faction as disabled\r\n        if (pickedFactions.length >= playerCount) {\r\n\r\n            for (const key in factions) {\r\n                if (!(factions[key].status === IS_PICKED || factions[key].status === IS_BANNED)) {\r\n                    factions[key].status = IS_NOT_AVAILABLE\r\n                }\r\n            }\r\n\r\n            return factions;\r\n        }\r\n\r\n        // Filter out picked and banned factions\r\n        let sortedFactionArray = Object.values(factions)\r\n            .filter((faction) => !(faction.status === IS_PICKED || faction.status === IS_BANNED))\r\n            .sort((faction1, faction2) => {\r\n                if (faction1.reach > faction2.reach) {\r\n                    return -1;\r\n                }\r\n                if (faction1.reach < faction2.reach) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        const playersStillToPick = playerCount - pickedFactions.length;\r\n\r\n        const reach = Object.values(factions)\r\n            .filter((faction) => faction.status === IS_PICKED)\r\n            .map((faction) => faction.reach)\r\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\r\n\r\n        for (const factionsKey in factions) {\r\n            if (factions[factionsKey].status === IS_PICKED || factions[factionsKey].status === IS_BANNED) {\r\n                continue;\r\n            }\r\n\r\n            if (factions[factionsKey].name === \"vagabond2\" && (factions.vagabond1.status !== IS_PICKED)){\r\n                factions[factionsKey].status = IS_NOT_AVAILABLE;\r\n                continue\r\n            }\r\n\r\n            let sortedFactionArrayWithoutFaction = sortedFactionArray.filter((faction) => faction.name !== factionsKey)\r\n            let maxReachForFaction = factions[factionsKey].reach;\r\n            for (let i = 0; i < playersStillToPick - 1; i++) {\r\n                if (sortedFactionArrayWithoutFaction[i]) {\r\n                    maxReachForFaction += sortedFactionArrayWithoutFaction[i].reach\r\n                }\r\n            }\r\n\r\n            if (reach + maxReachForFaction < requiredReach) {\r\n                factions[factionsKey].status = IS_NOT_AVAILABLE\r\n            } else {\r\n                factions[factionsKey].status = IS_AVAILABLE\r\n            }\r\n        }\r\n\r\n        return factions;\r\n    }\r\n\r\n    const handleFactionClick = (factionName) => {\r\n        let newFactions = {...factions};\r\n\r\n        switch (factions[factionName].status) {\r\n            case IS_AVAILABLE:\r\n                newFactions[factionName].status = IS_PICKED\r\n                break;\r\n            case IS_PICKED:\r\n                newFactions[factionName].status = IS_BANNED\r\n                break;\r\n            case IS_BANNED:\r\n                newFactions[factionName].status = IS_AVAILABLE\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        newFactions = setAvailableFactions(newFactions);\r\n\r\n        setFactions(newFactions);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const reach = Object.values(factions)\r\n            .filter((faction) => faction.status === IS_PICKED)\r\n            .map((faction) => faction.reach)\r\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\r\n\r\n        setReach(reach);\r\n    }, [setReach, factions])\r\n\r\n    return (\r\n        <Grid container columns={{xs: 3}} rowSpacing={6} justifyContent={'center'}>\r\n            {Object.values(factions).map((faction, index) => (\r\n                <Grid\r\n                    item\r\n                    xs={1}\r\n                    sx={\r\n                        {\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            height: \"9em\"\r\n                        }\r\n                    }\r\n                    key={index}\r\n                >\r\n                    <ChooseFactionButton\r\n                        handleFactionClick={handleFactionClick}\r\n                        faction={faction}\r\n                    />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};","import './App.css';\r\nimport * as React from \"react\";\r\n\r\nimport {Container, CssBaseline, Stack} from \"@mui/material\";\r\nimport {PlayerCountButtons} from \"./components/PlayerCountButtons\";\r\nimport {ChooseFactionButtons} from \"./components/ChooseFactionButtons\";\r\n\r\n\r\nconst ReachIndicator = ({reach, requiredReach}) => {\r\n    return(\r\n        <h3 data-cy={`reach-indicator`}>{reach}/{requiredReach}+</h3>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [reach, setReach] = React.useState(0);\r\n    const [requiredReach, setRequiredReach] = React.useState(21);\r\n    const [playerCount, setPlayerCount] = React.useState(4);\r\n\r\n    const handlePlayerCountButtonPress = (event, newRequiredReach) => {\r\n        if (newRequiredReach != null) {\r\n            setRequiredReach(newRequiredReach)\r\n            setPlayerCount(event.target.innerText)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"App\"\r\n                   sx={{minWidth: \"320px\", height: \"100%\"}}\r\n        >\r\n            <CssBaseline/>\r\n            <Stack\r\n                container\r\n                sx={{height: \"100%\"}}\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <ReachIndicator reach={reach} requiredReach={requiredReach}/>\r\n                <ChooseFactionButtons\r\n                    playerCount={playerCount}\r\n                    setReach={setReach}\r\n                    reach={reach}\r\n                    requiredReach={requiredReach}\r\n                />\r\n                <PlayerCountButtons\r\n                    requiredReach={requiredReach}\r\n                    handlePlayerCountButtonPress={handlePlayerCountButtonPress}\r\n                />\r\n            </Stack>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}