{"version":3,"sources":["components/PlayerCountButtons.js","faction-images/eyrie.png","faction-images/corvid.png","faction-images/alliance.png","faction-images/cult.png","faction-images/duchy.png","faction-images/riverfolk.png","faction-images/marquise.png","faction-images/vagabond.png","faction-images/vagabond2.png","faction-images/hundreds.png","faction-images/keepers.png","constants.js","components/FactionStatusOverlay.js","components/ChooseFactionButton.js","components/ChooseFactionButtons.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerCountButtons","_ref","requiredReach","handlePlayerCountButtonPress","_jsxs","Stack","justifyContent","children","_jsx","ToggleButtonGroup","exclusive","value","onChange","ToggleButton","IS_PICKED","IS_BANNED","IS_AVAILABLE","IS_NOT_AVAILABLE","FactionStatusOverlay","status","sx","position","zIndex","width","height","CheckCircleOutlineIcon","color","NotInterestedOutlinedIcon","_Fragment","ChooseFactionButton","faction","handleFactionClick","widthAndHeight","badgeTopAndRight","badgeFontSize","opacity","fabColor","getFactionButtonColor","Fab","onClick","name","reach","disabled","Badge","badgeContent","Avatar","fontSize","backgroundColor","top","right","alignItems","imgProps","objectFit","src","image","ChooseFactionButtons","playerCount","setReach","factions","setFactions","React","marquise","marquiseImage","eyrie","eyrieImage","alliance","allianceImage","vagabond1","vagabondImage","riverfolk","riverfolkImage","cult","cultImage","corvid","corvidImage","duchy","duchyImage","vagabond2","vagabond2Image","hundreds","hundredsImage","keepers","keepersImage","recalculatedFactions","setAvailableFactions","previousFactions","_objectSpread","pickedFactions","Object","values","filter","length","key","sortedFactionArray","sort","faction1","faction2","playersStillToPick","map","reduce","total","currentFactionReach","factionsKey","sortedFactionArrayWithoutFaction","maxReachForFaction","i","factionName","newFactions","Grid","container","columns","xs","rowSpacing","index","item","display","ReachIndicator","App","setRequiredReach","setPlayerCount","Container","maxWidth","className","minWidth","CssBaseline","event","newRequiredReach","target","innerText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc120782.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport {Stack, ToggleButton, ToggleButtonGroup} from \"@mui/material\";\r\n\r\nexport const PlayerCountButtons = ({requiredReach, handlePlayerCountButtonPress}) => {\r\n    return (\r\n        <Stack justifyContent=\"center\">\r\n            <h4>Players</h4>\r\n            <ToggleButtonGroup exclusive value={requiredReach} onChange={handlePlayerCountButtonPress}>\r\n                <ToggleButton value={17}>2</ToggleButton>\r\n                <ToggleButton value={18}>3</ToggleButton>\r\n                <ToggleButton value={21}>4</ToggleButton>\r\n                <ToggleButton value={25}>5</ToggleButton>\r\n                <ToggleButton value={28}>6</ToggleButton>\r\n            </ToggleButtonGroup>\r\n        </Stack>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/eyrie.4739ea8f.png\";","export default __webpack_public_path__ + \"static/media/corvid.d2562a48.png\";","export default __webpack_public_path__ + \"static/media/alliance.e806127f.png\";","export default __webpack_public_path__ + \"static/media/cult.4c81f45b.png\";","export default __webpack_public_path__ + \"static/media/duchy.fd1c72c5.png\";","export default __webpack_public_path__ + \"static/media/riverfolk.d7d55d70.png\";","export default __webpack_public_path__ + \"static/media/marquise.0fdde8b2.png\";","export default __webpack_public_path__ + \"static/media/vagabond.c1faa343.png\";","export default __webpack_public_path__ + \"static/media/vagabond2.89ede692.png\";","export default __webpack_public_path__ + \"static/media/hundreds.46ea4252.png\";","export default __webpack_public_path__ + \"static/media/keepers.61ee9ba3.png\";","export const IS_PICKED = 'IS_PICKED';\r\nexport const IS_BANNED = 'IS_BANNED';\r\nexport const IS_AVAILABLE = 'IS_AVAILABLE';\r\nexport const IS_NOT_AVAILABLE = 'IS_NOT_AVAILABLE';\r\n\r\n","import {IS_BANNED, IS_PICKED} from \"../constants\";\r\nimport CheckCircleOutlineIcon from \"@mui/icons-material/CheckCircleOutline\";\r\nimport NotInterestedOutlinedIcon from \"@mui/icons-material/NotInterestedOutlined\";\r\nimport * as React from \"react\";\r\n\r\nexport const FactionStatusOverlay = ({status}) => {\r\n    let sx = {\r\n        position: \"absolute\",\r\n        zIndex: \"1\",\r\n        width: \"85%\",\r\n        height: \"85%\"\r\n    }\r\n\r\n    switch (status) {\r\n        case IS_PICKED:\r\n            return (\r\n                <CheckCircleOutlineIcon\r\n                    color=\"success\"\r\n                    sx={sx}\r\n                />\r\n            )\r\n        case IS_BANNED:\r\n            return (\r\n                <NotInterestedOutlinedIcon\r\n                    color=\"error\"\r\n                    sx={sx}\r\n                />\r\n            )\r\n        default:\r\n            return (<></>)\r\n    }\r\n}","import {Avatar, Badge, Fab} from \"@mui/material\";\r\nimport * as React from \"react\";\r\nimport {IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\r\nimport {FactionStatusOverlay} from \"./FactionStatusOverlay\";\r\n\r\n\r\nconst getFactionButtonColor = (faction) => {\r\n    if (faction.status === IS_PICKED) {\r\n        return \"#4da251\"\r\n    }\r\n    if (faction.status === IS_BANNED) {\r\n        return \"#b66969\"\r\n    }\r\n}\r\n\r\nexport const ChooseFactionButton = ({faction, handleFactionClick}) => {\r\n    const widthAndHeight = faction.status === IS_NOT_AVAILABLE ? \"4em\" : \"7em\"\r\n    const badgeTopAndRight = faction.status === IS_NOT_AVAILABLE ? \"0.5em\" : \"1em\"\r\n    const badgeFontSize = faction.status === IS_NOT_AVAILABLE ? \"small\" : \"large\";\r\n    const opacity = faction.status === IS_NOT_AVAILABLE ? \"50%\" : \"100%\"\r\n    const fabColor = getFactionButtonColor(faction);\r\n\r\n    return (\r\n        <Fab onClick={() => handleFactionClick(faction.name)}\r\n             value={faction.reach}\r\n             sx={{width: widthAndHeight, height: widthAndHeight, opacity: opacity}}\r\n             disabled={faction.status === IS_NOT_AVAILABLE}\r\n             data-cy={faction.name}\r\n        >\r\n            <Badge\r\n                badgeContent={\r\n                    <Avatar\r\n                        sx={{width: \"2em\", height: \"2em\", fontSize: badgeFontSize, backgroundColor: fabColor}}\r\n                    >\r\n                        {faction.reach}\r\n                    </Avatar>\r\n                }\r\n                sx={\r\n                    {\r\n                        \"& .MuiBadge-badge\": {\r\n                            top: badgeTopAndRight,\r\n                            right: badgeTopAndRight,\r\n                        },\r\n                        width: \"100%\",\r\n                        height: \"100%\",\r\n                        alignItems: \"center\",\r\n                        justifyContent: \"center\"\r\n                    }\r\n                }\r\n            >\r\n                <FactionStatusOverlay status={faction.status}/>\r\n                <Avatar\r\n                    sx={{width: \"90%\", height: \"90%\"}}\r\n                    imgProps={{sx: {objectFit: \"contain\"}}}\r\n                    src={faction.image}\r\n                />\r\n            </Badge>\r\n        </Fab>\r\n    )\r\n}","import {Grid} from \"@mui/material\";\r\nimport eyrieImage from \"../faction-images/eyrie.png\";\r\nimport corvidImage from \"../faction-images/corvid.png\";\r\nimport allianceImage from \"../faction-images/alliance.png\";\r\nimport cultImage from \"../faction-images/cult.png\";\r\nimport duchyImage from \"../faction-images/duchy.png\";\r\nimport riverfolkImage from \"../faction-images/riverfolk.png\";\r\nimport marquiseImage from \"../faction-images/marquise.png\";\r\nimport vagabondImage from \"../faction-images/vagabond.png\";\r\nimport vagabond2Image from \"../faction-images/vagabond2.png\";\r\nimport hundredsImage from \"../faction-images/hundreds.png\";\r\nimport keepersImage from \"../faction-images/keepers.png\";\r\nimport * as React from 'react';\r\nimport {IS_AVAILABLE, IS_BANNED, IS_NOT_AVAILABLE, IS_PICKED} from \"../constants\";\r\nimport {ChooseFactionButton} from \"./ChooseFactionButton\";\r\n\r\nexport const ChooseFactionButtons = ({playerCount, setReach, requiredReach}) => {\r\n    const [factions, setFactions] = React.useState({\r\n        marquise: {\r\n            name: \"marquise\",\r\n            image: marquiseImage,\r\n            reach: 10,\r\n            status: IS_AVAILABLE\r\n        },\r\n        eyrie: {\r\n            name: \"eyrie\",\r\n            image: eyrieImage,\r\n            reach: 7,\r\n            status: IS_AVAILABLE\r\n        },\r\n        alliance: {\r\n            name: \"alliance\",\r\n            image: allianceImage,\r\n            reach: 3,\r\n            status: IS_AVAILABLE\r\n        },\r\n        vagabond1: {\r\n            name: \"vagabond1\",\r\n            image: vagabondImage,\r\n            reach: 5,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        riverfolk: {\r\n            name: \"riverfolk\",\r\n            image: riverfolkImage,\r\n            reach: 5,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        cult: {\r\n            name: \"cult\",\r\n            image: cultImage,\r\n            reach: 2,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        corvid: {\r\n            name: \"corvid\",\r\n            image: corvidImage,\r\n            reach: 3,\r\n            status: IS_AVAILABLE\r\n        },\r\n        duchy: {\r\n            name: \"duchy\",\r\n            image: duchyImage,\r\n            reach: 8,\r\n            status: IS_AVAILABLE\r\n        },\r\n        vagabond2: {\r\n            name: \"vagabond2\",\r\n            image: vagabond2Image,\r\n            reach: 2,\r\n            status: IS_NOT_AVAILABLE\r\n        },\r\n        hundreds: {\r\n            name: \"hundreds\",\r\n            image: hundredsImage,\r\n            reach: 9,\r\n            status: IS_AVAILABLE\r\n        },\r\n        keepers: {\r\n            name: \"keepers\",\r\n            image: keepersImage,\r\n            reach: 8,\r\n            status: IS_AVAILABLE\r\n        }\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        const recalculatedFactions = setAvailableFactions(factions);\r\n\r\n        setFactions(recalculatedFactions);\r\n    }, [requiredReach])\r\n\r\n    const setAvailableFactions = (previousFactions) => {\r\n        const factions = {...previousFactions};\r\n        const pickedFactions = Object.values(factions).filter((faction) => faction.status === IS_PICKED)\r\n\r\n        // If the number of picked factions >= number of players in game then set every not picked and not banned faction as disabled\r\n        if (pickedFactions.length >= playerCount) {\r\n\r\n            for (const key in factions) {\r\n                if (!(factions[key].status === IS_PICKED || factions[key].status === IS_BANNED)) {\r\n                    factions[key].status = IS_NOT_AVAILABLE\r\n                }\r\n            }\r\n\r\n            return factions;\r\n        }\r\n\r\n        // Filter out picked and banned factions\r\n        let sortedFactionArray = Object.values(factions)\r\n            .filter((faction) => !(faction.status === IS_PICKED || faction.status === IS_BANNED))\r\n            .sort((faction1, faction2) => {\r\n                if (faction1.reach > faction2.reach) {\r\n                    return -1;\r\n                }\r\n                if (faction1.reach < faction2.reach) {\r\n                    return 1;\r\n                }\r\n                return 0;\r\n            });\r\n\r\n        const playersStillToPick = playerCount - pickedFactions.length;\r\n\r\n        const reach = Object.values(factions)\r\n            .filter((faction) => faction.status === IS_PICKED)\r\n            .map((faction) => faction.reach)\r\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\r\n\r\n        for (const factionsKey in factions) {\r\n            if (factions[factionsKey].status === IS_PICKED || factions[factionsKey].status === IS_BANNED) {\r\n                continue;\r\n            }\r\n\r\n            if (factions[factionsKey].name === \"vagabond2\" && (factions.vagabond1.status !== IS_PICKED)){\r\n                factions[factionsKey].status = IS_NOT_AVAILABLE;\r\n                continue\r\n            }\r\n\r\n            let sortedFactionArrayWithoutFaction = sortedFactionArray.filter((faction) => faction.name !== factionsKey)\r\n            let maxReachForFaction = factions[factionsKey].reach;\r\n            for (let i = 0; i < playersStillToPick - 1; i++) {\r\n                if (sortedFactionArrayWithoutFaction[i]) {\r\n                    maxReachForFaction += sortedFactionArrayWithoutFaction[i].reach\r\n                }\r\n            }\r\n\r\n            if (reach + maxReachForFaction < requiredReach) {\r\n                factions[factionsKey].status = IS_NOT_AVAILABLE\r\n            } else {\r\n                factions[factionsKey].status = IS_AVAILABLE\r\n            }\r\n        }\r\n\r\n        return factions;\r\n    }\r\n\r\n    const handleFactionClick = (factionName) => {\r\n        let newFactions = {...factions};\r\n\r\n        switch (factions[factionName].status) {\r\n            case IS_AVAILABLE:\r\n                newFactions[factionName].status = IS_PICKED\r\n                break;\r\n            case IS_PICKED:\r\n                newFactions[factionName].status = IS_BANNED\r\n                break;\r\n            case IS_BANNED:\r\n                newFactions[factionName].status = IS_AVAILABLE\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        newFactions = setAvailableFactions(newFactions);\r\n\r\n        setFactions(newFactions);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        const reach = Object.values(factions)\r\n            .filter((faction) => faction.status === IS_PICKED)\r\n            .map((faction) => faction.reach)\r\n            .reduce((total, currentFactionReach) => total + currentFactionReach, 0);\r\n\r\n        setReach(reach);\r\n    }, [setReach, factions])\r\n\r\n    return (\r\n        <Grid container columns={{xs: 3}} rowSpacing={6} justifyContent={'center'}>\r\n            {Object.values(factions).map((faction, index) => (\r\n                <Grid\r\n                    item\r\n                    xs={1}\r\n                    sx={\r\n                        {\r\n                            display: \"flex\",\r\n                            justifyContent: \"center\",\r\n                            alignItems: \"center\",\r\n                            height: \"9em\"\r\n                        }\r\n                    }\r\n                    key={index}\r\n                >\r\n                    <ChooseFactionButton\r\n                        handleFactionClick={handleFactionClick}\r\n                        faction={faction}\r\n                    />\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n};","import './App.css';\r\nimport * as React from \"react\";\r\n\r\nimport {Container, CssBaseline, Stack} from \"@mui/material\";\r\nimport {PlayerCountButtons} from \"./components/PlayerCountButtons\";\r\nimport {ChooseFactionButtons} from \"./components/ChooseFactionButtons\";\r\n\r\n\r\nconst ReachIndicator = ({reach, requiredReach}) => {\r\n    return(\r\n        <h3 data-cy={`reach-indicator`}>{reach}/{requiredReach}+</h3>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [reach, setReach] = React.useState(0);\r\n    const [requiredReach, setRequiredReach] = React.useState(21);\r\n    const [playerCount, setPlayerCount] = React.useState(4);\r\n\r\n    const handlePlayerCountButtonPress = (event, newRequiredReach) => {\r\n        if (newRequiredReach != null) {\r\n            setRequiredReach(newRequiredReach)\r\n            setPlayerCount(event.target.innerText)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Container maxWidth=\"sm\" className=\"App\"\r\n                   sx={{minWidth: \"320px\", height: \"100%\"}}\r\n        >\r\n            <CssBaseline/>\r\n            <Stack\r\n                container\r\n                sx={{height: \"100%\"}}\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n                <ReachIndicator reach={reach} requiredReach={requiredReach}/>\r\n                <ChooseFactionButtons\r\n                    playerCount={playerCount}\r\n                    setReach={setReach}\r\n                    reach={reach}\r\n                    requiredReach={requiredReach}\r\n                />\r\n                <PlayerCountButtons\r\n                    requiredReach={requiredReach}\r\n                    handlePlayerCountButtonPress={handlePlayerCountButtonPress}\r\n                />\r\n            </Stack>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}